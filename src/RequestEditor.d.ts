/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   src/RequestEditor.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {LitElement, html} from 'lit-element';

import {EventsTargetMixin} from '@advanced-rest-client/events-target-mixin/events-target-mixin.js';

export {RequestEditor};

declare namespace UiElements {

  /**
   * An element that renders the UI to create a HTTP request.
   *
   * It produces the following values (as element's properties):
   *
   * - url - the request URL
   * - method - HTTP method
   * - headers - HTTP headers string
   * - payload - Request body. It can be either String,
   * [File](https://developer.mozilla.org/en-US/docs/Web/API/File),
   * ([Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)), or
   * [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData).
   * - requestActions - List of request actions as defined in
   * `request-actions-panel` element.
   * - responseActions - List of response actions as defined in
   * `request-actions-panel` element.
   * - headersModel - Model for headers value (not yet implemented)
   *
   * ## Variables
   *
   * Output of abt of this properties can contain a variables in format `${varName}`.
   * Use
   * [variables-evaluator](https://github.com/advanced-rest-client/variables-evaluator)
   * to evaluate variables to the final output.
   *
   * This element works with
   * [variables-manager](https://github.com/advanced-rest-client/variables-manager)
   * that stores variables in the local datastore. It should be placed anywhere
   * in the DOM. The elements uses browser's events system to communicate.
   *
   * Note, as of version 2.0 this component does not include editor for variables.
   * Variables are not part of the request and therefore are included into request
   * editor. The app should place `variables-editor` somewhere.
   *
   * ## Events retargeting
   *
   * The editors listens to varous events related to the request state. By default
   * all of the editors listens on a window object. To limit this, set `eventsTarget`
   * on this element to point an element that will be used as events target.
   * This way it is possible to enclose the request panel in a "tab".
   *
   * The `eventsTarget` property is propagated to the editors.
   *
   * Event fired by this or any of the editors will not stop on the `eventsTarget`
   * element and you are responsible to cancel them if nescesary.
   *
   * ## Accessing request data
   *
   * You can access request data by either accessing corresponding property of the
   * element, by listening for `property-changed` event or by listening for
   * `change` custom event.
   *
   * Only the last one bubbles through the DOM.
   *
   * ### Example
   *
   * ```html
   * <request-editor
   *  url="{{requestUrl}}"
   *  on-headers-changed="_headersChangedEvent"></request-editor>
   * ```
   *
   * or
   *
   * ```javascript
   * document.body.addEventListener('change', (e) => {
   *  console.log(e.detail);
   * });
   * ```
   *
   * ### Styling
   *
   * `<request-editor>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--request-editor` | Mixin applied to the element | `{}`
   * `--request-editor-url-editor` | Mixin applied to a line with the URL editor | `{}`
   * `--arc-font-subhead` | Theme mixin, applied to the section name title | `{}`
   * `--action-button` | Theme mixin, applied to the acction buttons | `{}`
   * `--request-editor-context-menu-icon-color` | Color of an icon in the context
   * menu | `--primary-color`
   * `--request-editor-context-menu-icon` | Mixin applied to an icon in the
   * context menu | `{}`
   * `--request-editor-main-action-buttons` | Mixin applied to the action buttons
   * next to the URL editor | `{}`
   * `--request-editor-url-input-editor` | Mixin applied to the URL editor | `{}`
   * `--request-editor-method-selector` | Mixin applied to the methos selector in
   * narrow view | `{}`
   * `--request-editor-method-selector-mini` | Mixin applied to the methos selector
   * in wide view | `{}`
   * `--request-editor-context-menu` | Mixin applied to the main action context
   *  menu dropdown | `{}`
   * `--request-editor-context-menu-dropdown` | Mixin applied to the main action
   * context menu dropdown container | `{}`
   * `--request-editor-main-action-button` | Mixin applied to the send / abort
   * buttons | `{}`
   * `--request-editor-tabs-container` | Mixin applied to the headers and body
   * editors container | `{}`
   * `--request-editor-tab-selected` | Mixin applied to selected tab | `{}`
   * `--request-editor-url-line-color` | Color of the URL section | ``
   * `--request-editor-context-menu-color` | Color of the context menu | ``
   * `--context-menu-item-color` | Color of the context menu item | ``
   * `--context-menu-item-background-color` | Background color of the context menu item | ``
   * `--context-menu-item-color-hover` | Color of the context menu item when hovered | ``
   * `--context-menu-item-background-color-hover` | Background color of the context menu item when hovered | ``
   *
   * To style edtors use variables defined in the following elements:
   * - [url-input-editor](https://github.com/advanced-rest-client/url-input-editor)
   * - [headers-editor](https://github.com/advanced-rest-client/headers-editor)
   * - [http-method-selector](https://github.com/advanced-rest-client/http-method-selector)
   * - [payload-editor](https://github.com/advanced-rest-client/payload-editor)
   * - [variables-editor](https://github.com/advanced-rest-client/variables-editor)
   *
   * Also anypoint elements: `anypoint-button`, `anypoint-tab`, and `anypoint-tabs`
   */
  class RequestEditor extends
    EventsTargetMixin(
    Object) {
    readonly isPayload: Boolean|null;

    /**
     * Current state of the editor that can be later used to restore
     * the satte. This does not count for request data. It only shows
     * state of the UI regions.
     */
    state: object|null;
    onchange: any|null;
    readonly currentEditor: any;
    readonly authorizationSelector: any;

    /**
     * Computes class for the toggle's button icon.
     */
    readonly toggleIconClass: String|null;

    /**
     * Computes title attribute for panel toggle icon.
     */
    readonly toggleLabel: String|null;

    /**
     * An index of currently opened tab.
     */
    selectedTab: number|null|undefined;

    /**
     * Current content type.
     */
    contentType: string|null|undefined;

    /**
     * It is set to true automatically when current request can have payload.
     */
    _isPayload: boolean|null|undefined;

    /**
     * Request headers.
     */
    headers: string|null|undefined;

    /**
     * Body for the request. Note, it may have value even if `isPayload` is set to false.
     */
    payload: string|null|undefined;

    /**
     * Current request URL
     */
    url: string|null|undefined;

    /**
     * Current HTTP method
     */
    method: string|null|undefined;

    /**
     * List of request actions to be performed when the response is received
     */
    responseActions: any[]|null|undefined;

    /**
     * List of request actions to be performed before request is send
     */
    requestActions: any[]|null|undefined;

    /**
     * If set it renders the view in the narrow layout.
     */
    narrow: boolean|null|undefined;

    /**
     * When set it will display the UI to indicate that the request is being
     * send.
     */
    loadingRequest: boolean|null|undefined;

    /**
     * True if the editor panel is opened
     */
    collapseOpened: boolean|null|undefined;

    /**
     * Redirect URL for the OAuth2 authorization.
     * If can be also set by dispatching `oauth2-redirect-url-changed`
     * with `value` property on the `detail` object.
     */
    oauth2RedirectUri: string|null|undefined;

    /**
     * Generated request ID when the request is sent. This value is reported
     * in send and abort events
     */
    requestId: string|null|undefined;

    /**
     * Current authorization settings.
     */
    auth: object|null|undefined;

    /**
     * Enabled authorization method
     */
    authType: string|null|undefined;

    /**
     * When set the editor is in read only mode.
     */
    readOnly: boolean|null|undefined;

    /**
     * Set to open URL detailed editor.
     */
    urlOpened: boolean|null|undefined;

    /**
     * Request configuration options.
     * This object is passed with the `api-request` event.
     */
    config: object|null;

    /**
     * When set it will ignore all `content-*` headers when the request method
     * is either `GET` or `HEAD`.
     * When not set or `false` it renders warning dialog.
     */
    ignoreContentOnGet: Boolean|null;

    /**
     * Enables compatibility with Anypoint platform
     */
    compatibility: boolean|null|undefined;

    /**
     * Enables material's outlined theme for inputs.
     */
    outlined: boolean|null|undefined;

    /**
     * A value to be passed to the OAuth 2 `authorizationUri` property in case
     * if current configuration has no value.
     * This is to be used as a default value.
     */
    oauth2AuthorizationUri: string|null|undefined;

    /**
     * A value to be passed to the OAuth 2 `accessTokenUri` property in case
     * if current configuration has no value.
     * This is to be used as a default value.
     */
    oauth2AccessTokenUri: string|null|undefined;
    _attachListeners(node: any): void;
    _detachListeners(node: any): void;

    /**
     * Handler for the `api-response` custom event.
     * Clears the loading state.
     */
    _responseHandler(e: CustomEvent|null): void;

    /**
     * Handler for the `oauth2-redirect-uri-changed` custom event. Changes
     * the `oauth2RedirectUri` property.
     */
    _authRedirectChangedHandler(e: CustomEvent|null): void;

    /**
     * Handles an event dispatched by eny of the child elements.
     * It cancels the even and stops it's propagation and the sends the request
     */
    _sendRequestInner(e: CustomEvent|null): void;

    /**
     * Updates the editor state when `stae` changes.
     *
     * @param state Current state
     */
    _stateChanged(state: object|null): any;

    /**
     * Validates state of the URL.
     *
     * @returns True if the URL has a structure that looks like
     * an URL which means sheme + something
     */
    validateUrl(): Boolean|null;

    /**
     * Dispatches the `api-request` custom event to send the request.
     *
     * @param opts Send oiptions:
     * - ignoreValidation (Boolean) - Ignores headers validation
     */
    send(opts: object|null): void;

    /**
     * Checks if current request requires calling `authorize()` on current
     * authorization method.
     *
     * @returns This returns `true` only for valid OAuth 2 method that has
     * no access token.
     */
    requiresAuthorization(): Boolean|null;

    /**
     * Handler for the dialog confirmation button click.
     * Resends the request and skips validation.
     */
    _sendIgnoreValidation(): void;

    /**
     * Sends the `abort-api-request` custom event to cancel the request.
     */
    abort(): void;

    /**
     * Clears the request properties and sends cancelable `request-clear-state`
     * custom event.
     */
    clearRequest(): void;

    /**
     * Deselects menu item if the URL editor is present.
     */
    _unselectRequestMenu(): void;

    /**
     * Calls `notifyResize()` on `paper-tabs` and on currently selected panel
     * if any is selected.
     */
    notifyResize(): void;

    /**
     * Returns headers value.
     * If `ignoreContentOnGet` flag is set and request is `get` then it clears
     * all `content-*` headers.
     *
     * @param method Current HTTP method name.
     * @returns HTTP headers string to use with request.
     */
    _getHeaders(method: String|null): String|null;

    /**
     * Serializes current request data into an object.
     *
     * @returns Request data object with the following keys:
     * - url (can be empty)
     * - method (can be empty)
     * - headers (can be empty)
     * - payload (can be undefined)
     * - auth (can be undefined)
     * - actions (can be undefined)
     * - queryModel (Array)
     */
    serializeRequest(): object|null;

    /**
     * Toggles body panel.
     */
    toggle(): void;

    /**
     * Dispatches bubbling and composed custom event.
     * By default the event is cancelable until `cancelable` property is set to false.
     *
     * @param type Event type
     * @param detail A detail to set
     * @param cancelable When false the event is not cancelable.
     */
    _dispatch(type: String|null, detail: any|null, cancelable: Boolean|null): CustomEvent|null;

    /**
     * Sends usage google analytics event
     *
     * @param action Action description
     * @param label Event label
     */
    _sendGaEvent(action: String|null, label: String|null): CustomEvent|null;

    /**
     * Caled when a value on one of the editors change.
     * Dispatches non-bubbling `change` event.
     */
    notifyRequestChanged(): void;
    notifyChanged(type: any, value: any): void;

    /**
     * Refreshes payload and headers editors
     * state (code mirror) if currently selected.
     */
    refreshEditors(): void;

    /**
     * Validates headers for `Content-*` entries agains current method.
     *
     * @param request The request object
     * @returns True if headers are invalid.
     */
    _validateContentHeaders(request: object|null): Boolean|null;
    _computePanelState(): void;
    _isPayloadHandler(e: any): any;
    _methodHandler(e: any): void;
    _urlHandler(e: any): void;
    _urlOpenedHandler(e: any): void;
    _requestMenuClosed(): void;
    _tabHandler(e: any): void;
    _ctHandler(e: any): void;
    _headersHandler(e: any): void;
    _bodyHandler(e: any): void;
    _authChangeHandler(e: any): void;
    _requestActionsChanged(e: any): void;
    _responseActionsChanged(e: any): void;
    _configHandler(e: any): void;
    render(): any;
    _contentTemplate(): any;
    _urlTemplate(): any;
    _methodSelectorTemplate(): any;
    _methodSelectorMiniTemplate(): any;
    _actionButtonTemplate(): any;
    _requestContextMenuTemplate(): any;
    _paramsHeaderTemplate(): any;
    _headersDialogTemplate(): any;
    _editorsTabsTemplate(): any;
    _editorsTemplate(): any;
    _headerEditorTemplate(hidden: any): any;
    _bodyEditorTemplate(hidden: any): any;
    _authEditorTemplate(hidden: any): any;
    _basicAuthTemplate(type: any, config?: any): any;
    _ntlmAuthTemplate(type: any, config?: any): any;
    _oa1AuthTemplate(type: any, config?: any): any;
    _oa2AuthTemplate(type: any, config?: any): any;
    _ccAuthTemplate(type: any, config?: any): any;
    _actionsEditorTemplate(): any;
    _configEditorTemplate(): any;
    _codeTemplate(): any;
  }
}
